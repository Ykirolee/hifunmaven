<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE sqlMap     
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN"     
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">
<sqlMap namespace="basic">
	
	<typeAlias alias="banner" type="com.hifun.bean.Banner"/>
	<typeAlias alias="menu" type="com.hifun.bean.Menu"/>
	<typeAlias alias="sessionuser" type="com.hifun.base.session.SessionUser"/>
	<typeAlias alias="hithings" type="com.hifun.bean.HiThings"/>
	<typeAlias alias="hiplayground" type="com.hifun.bean.HiPlayground"/>
	<typeAlias alias="shop" type="com.hifun.bean.Shop"/>
	<typeAlias alias="applyfriend" type="com.hifun.bean.ApplyFriend"/>
	
	<select id="query-banner-validatelist" resultClass="banner">
		<![CDATA[
			select id, title, path, linkType, linkTo from banner 
			where effectiveFrom <= now() and (effectiveTo > now() or effectiveTo is null)
			order by createTime desc limit 6
		]]>
	</select>
	
	<select id="query-menu-validatelist" resultClass="menu">
		<![CDATA[
			select id, menuCode, menuName, menuPath, menuLevel, orderNum, parentCode, remark, linkTo from menu
			where effectiveFrom <= now() and (effectiveTo > now() or effectiveTo is null) and parentCode is null
			order by orderNum asc
		]]>
	</select>
	
	<select id="query-toptenusers" resultClass="sessionuser">
		select username, nickname, exp from user order by exp desc, id asc limit 10
	</select>
	
	<select id="query-hithings-bystatus" parameterClass="int" resultClass="hithings">
		<![CDATA[
			select ht.id, ht.username, u.nickname, ht.content, ht.status, ht.remark, ht.updateTime, ht.zannum, ht.cainum from hiThings ht
			left join user u on ht.username = u.username
			where ht.status = #status# and ht.effectiveFrom <= now() and (ht.effectiveTo > now() or ht.effectiveTo is null)
			order by ht.updateTime desc
		]]>
	</select>
	
	<select id="query-hithings-byusernamestatus" parameterClass="java.util.Map" resultClass="hithings">
		<![CDATA[
			select ht.id, ht.username, u.nickname, ht.content, ht.status, ht.remark, ht.updateTime, ht.zannum, ht.cainum, 
			case when e.evaluateTypeId is null then 0 else e.evaluateTypeId end as evaluateTypeId from hiThings ht
			left join user u on ht.username = u.username
			left join evaluate e on e.evaluateId = ht.id and e.username = #username#
			left join evaluate_relate er on er.relateTypeId = e.relateTypeId and er.relateTypeName = 'hithings'
			where ht.status = #status# and ht.effectiveFrom <= now() and (ht.effectiveTo > now() or ht.effectiveTo is null)
			order by ht.updateTime desc
		]]>
	</select>
	
	<insert id="insert-hithings" parameterClass="java.util.Map">
		insert into hiThings (username, content, remark, createTime, createBy, updateTime, updateBy, effectiveFrom, effectiveTo)
		values (#username#, #content#, #remark#, #nowdate#, #username#, #nowdate#, #username#, #nowdate#, NULL)
	</insert>
	
	<insert id="insert-hiplayground" parameterClass="java.util.Map">
		insert into hiPlayground (username, content, remark, createTime, createBy, updateTime, updateBy, effectiveFrom, effectiveTo)
		values (#username#, #content#, #remark#, #nowdate#, #username#, #nowdate#, #username#, #nowdate#, NULL)
	</insert>
	
	<select id="query-evaluaterelateid-byname" parameterClass="string" resultClass="int">
		select relateTypeId from evaluate_relate where relateTypeName = #relateTypeName# limit 1
	</select>
	
	<insert id="insert-evaluate" parameterClass="java.util.Map">
		insert into evaluate (username, evaluateTime, evaluateId, evaluateTypeId, relateTypeId, createTime, createBy, updateTime, updateBy, effectiveFrom)
		values (#username#, #nowdate#, #evaluateId#, #evaluateTypeId#, #relateTypeId#, #nowdate#, #username#, #nowdate#, #username#, #nowdate#)
	</insert>
	
	<select id="query-evaluatecount" parameterClass="java.util.Map" resultClass="int">
		select count(1) from evaluate where username = #username# and evaluateId = #evaluateId#
	</select>
	
	<update id="update-hithingsnum" parameterClass="java.util.Map">
		update hiThings set 
		<isEqual property="evaluateTypeId" compareValue="1">
			zannum = zannum + 1
		</isEqual>
		<isNotEqual property="evaluateTypeId" compareValue="1">
			cainum = cainum + 1
		</isNotEqual>
		where id = #evaluateId#
	</update>
	
	<select id="query-totalzan" parameterClass="java.util.Map" resultClass="int">
		<![CDATA[
			select count(1) from evaluate 
			where evaluateTime >= #nowdate# and username = #username# and relateTypeId = #relateTypeId# and evaluateTypeId = 1
		]]>
	</select>
	
	<select id="query-allshop-bystatus" parameterClass="java.util.Map" resultClass="shop">
		select s.id, s.username, s.shopName, s.shopDesc, 
		s.shopAddr, s.status, s.passTime, s.updateTime 
		from shop s
		<![CDATA[
			where s.effectiveFrom <= now() and (s.effectiveTo > now() or s.effectiveTo is null)
		]]>
		and s.status = #status#
		<isNotEmpty property="shopName" prepend="and">
			s.shopName like concat('%', #shopName#, '%')
		</isNotEmpty>
		order by updateTime desc
	</select>
	
	<resultMap class="java.util.HashMap" id="signMap">
		<result property="username" column="username" javaType="java.lang.String"/>
		<result property="daynum" column="daynum" javaType="java.lang.Integer"/>
	</resultMap>
	<select id="query-signmap" resultClass="map" resultMap="signMap">
		SELECT t.username, CASE WHEN t.flag = 2 THEN 0 
		ELSE 
		DATEDIFF(DATE_FORMAT(NOW(), '%Y-%m-%d'), DATE_FORMAT(MAX(t.signTime1), '%Y-%m-%d')) + 1 - t.flag END AS daynum FROM
		(
			SELECT s1.`id`, u.`username`, 
				DATE_FORMAT(s1.`signTime`, '%Y-%m-%d') signTime1, 
				DATE_FORMAT(s2.`signTime`, '%Y-%m-%d') signTime2,
				DATEDIFF(DATE_FORMAT(s1.`signTime`, '%Y-%m-%d'), DATE_FORMAT(s2.`signTime`, '%Y-%m-%d')) sign_datediff,
				<![CDATA[
				CASE WHEN ins3.flag <= 1 THEN flag ELSE 2 END AS flag
				]]>
			FROM user u 
			LEFT JOIN signWeb s1 on u.username = s1.username
			LEFT JOIN signWeb s2 ON s1.`username` = s2.`username` 
				AND DATEDIFF(DATE_FORMAT(s1.`signTime`, '%Y-%m-%d'), DATE_FORMAT(s2.`signTime`, '%Y-%m-%d')) = 1
			LEFT JOIN (
				SELECT DATEDIFF(DATE_FORMAT(NOW(), '%Y-%m-%d'), DATE_FORMAT(MAX(s3.signTime), '%Y-%m-%d')) flag, s3.username 
					FROM signWeb s3
					WHERE 1 = 1
					<isNotEmpty prepend="and" property="username">
						s4.username = #username#
					</isNotEmpty>
					GROUP BY s3.username
			) ins3 ON ins3.username = s1.username
			WHERE 1 = 1 
			<isNotEmpty prepend="and" property="username">
				u.`username` = #username#
			</isNotEmpty>
			GROUP BY u.`username`, s1.`id`
		) t 
		WHERE t.signTime2 IS NULL GROUP BY t.username
	</select>
	
	<update id="update-usersign-byusername" parameterClass="java.util.Map">
		update user set daynum = #daynum# where username = #username#
	</update>
	
	<insert id="insert-shop" parameterClass="java.util.Map">
		insert into shop (username, shopName, shopType, shopLevel, shopDesc, shopAddr, status, createTime, createBy, updateTime, updateBy, effectiveFrom)
		values (#username#, #shopName#, #shopType#, #shopLevel#, #shopDesc#, #shopAddr#, #status#, #nowdate#, 'admin', #nowdate#, 'admin', #nowdate#)
	</insert>
	
	<select id="query-shopcount-byusername" parameterClass="string" resultClass="int">
		select count(1) from shop where username = #username#
	</select>
	
	<insert id="insert-applyfriend" parameterClass="java.util.Map">
		insert into applyFriend (applyTo, applyTime, applyStatus, username, createTime, createBy, updateTime, updateBy, effectiveFrom)
		values (#applyTo#, #nowdate#, 1, #username#, #nowdate#, #username#, #nowdate#, #username#, #nowdate#)
	</insert>
	
	<select id="query-applyfriend-applystatus" parameterClass="java.util.Map" resultClass="int">
		select applyStatus from applyFriend 
		where ((username = #username# and applyTo = #applyTo#) or (applyTo = #username# and username = #applyTo#))
		<![CDATA[
			and effectiveFrom <= now() and (effectiveTo >= now() or effectiveTo is null)
		]]>
		limit 1
	</select>
	
	<select id="query-applyfriend-byapplyto" parameterClass="string" resultClass="applyfriend">
		select af.id, af.applyTo, af.applyTime, af.applyStatus, af.passTime, af.username, u.nickname, af.remark 
		from applyFriend af left join user u on u.username = af.username
		where af.applyStatus = 1 and af.applyTo = #applyTo#
		<![CDATA[
			and af.effectiveFrom <= now() and (af.effectiveTo >= now() or af.effectiveTo is null)
		]]>
	</select>
	
	<update id="update-applyfriend-byusername" parameterClass="java.util.Map">
		update applyFriend set applyStatus = #applyStatus#, passTime = #nowdate#
		<isEqual property="applyStatus" compareValue="-1" prepend=",">
			effectiveTo = #nowdate#
		</isEqual>
		where applyTo = #applyTo# and username = #username#
		<![CDATA[
			and effectiveFrom <= now() and (effectiveTo >= now() or effectiveTo is null)
		]]> 
	</update>
	
	<resultMap class="applyfriend" id="applyfriend">
		<result property="fusername" column="fusername"/>
		<result property="nickname" column="nickname"/>
	</resultMap>
	<select id="query-applyfriend-byusername" parameterClass="java.util.Map" resultMap="applyfriend">
		select t.fusername, t.nickname from(
			select af.applyTo fusername, u.nickname nickname
			from applyFriend af left join user u on u.username = af.applyTo
			where af.username = #username# and af.applyStatus = #applyStatus#
			<![CDATA[
				and af.effectiveFrom <= now() and (af.effectiveTo >= now() or af.effectiveTo is null)
			]]> 
			union all
			select af.username fusername, u.nickname nickname
			from applyFriend af left join user u on u.username = af.username
			where af.applyTo = #username# and af.applyStatus = #applyStatus#
			<![CDATA[
				and af.effectiveFrom <= now() and (af.effectiveTo >= now() or af.effectiveTo is null)
			]]> 
		) t
	</select>
	
</sqlMap>